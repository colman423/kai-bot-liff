{"version":3,"sources":["components/core/Loading.js","wrappers/init.js","wrappers/AppRoutes.js","wrappers/Theme.js","App.js","serviceWorker.js","index.js"],"names":["Loading","size","textAlign","p","VConsole","retry","fn","retriesLeft","interval","Promise","resolve","reject","then","catch","error","setTimeout","Home","lazy","UserProfile","About","AppRoutes","console","log","basename","fallback","exact","path","component","from","to","theme","args","reduce","prevTheme","arg","option","createMuiTheme","createMuiThemeSequence","palette","primary","main","light","accent","secondary","highlight","disabled","text","bodyBackground","progressBar","typography","fontFamily","join","useNextVariants","h2","fontWeight","h3","h6","fontSize","color","subtitle1","fontWeightMedium","subtitle2","body1","body2","caption","props","MuiTypography","variantMapping","h1","h4","h5","overrides","MuiButton","root","textTransform","verticalAlign","MuiTabs","height","minHeight","MuiTab","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5ebffb4d.chunk.js","sourcesContent":["import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { Box } from '@material-ui/core';\n\nfunction Loading({size}) {\n  return (\n    <Box textAlign=\"center\" p={3}>\n      <CircularProgress size={size || 50}/>\n    </Box>\n\n  )\n}\n\nexport default Loading\n","import VConsole from 'vconsole'\nvar vConsole = new VConsole();\n","import React, { lazy, Suspense, useMemo } from 'react';\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Loading from '../components/core/Loading';\n\n// Helper function to retry lazy import when failed\n// Will try 5 times with 1 sec delay between each attempt\nfunction retry(fn, retriesLeft = 5, interval = 1000) {\n  return new Promise((resolve, reject) => {\n    fn()\n      .then(resolve)\n      .catch((error) => {\n        setTimeout(() => {\n          if (retriesLeft === 1) {\n            // reject('maximum retries exceeded');\n            reject(error)\n            return\n          }\n\n          // Passing on \"reject\" is the important part\n          retry(fn, retriesLeft - 1, interval).then(resolve, reject)\n        }, interval)\n      })\n  })\n}\n\nconst Home = lazy(() => retry(() => import('../containers/Home')))\nconst UserProfile = lazy(() => retry(() => import('../containers/UserProfile')))\nconst About = lazy(() => retry(() => import('../containers/About')))\n\n\nfunction AppRoutes() {\n  console.log(\"AppRoutes\")\n  return (\n    <HashRouter basename='/'>\n      <Suspense fallback={<Loading />}>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/user-profile\" component={UserProfile} />\n          <Route exact path=\"/about\" component={About} />\n          <Redirect from=\"*\" to=\"/\" />\n        </Switch>\n      </Suspense>\n    </HashRouter>\n  );\n}\n\nexport default AppRoutes;\n","import React, { memo } from 'react'\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles'\n\nimport { CssBaseline } from '@material-ui/core'\n\n\nfunction createMuiThemeSequence(...args) {\n  const theme = args.reduce((prevTheme, arg) => {\n    const option = (typeof arg === \"function\") ? arg(prevTheme) : arg\n    return createMuiTheme({ ...prevTheme, ...option })\n  }, createMuiTheme())\n  return theme\n}\n\n\nconst theme = createMuiThemeSequence(\n  () => ({\n    palette: {\n      primary: {\n        main: '#29354c',\n        light: '#f2f2f2'\n        // contrastText: 'red'\n      },\n      accent: {\n        main: '#fed602'\n      },\n      secondary: {\n        main: '#3777A4',   // icon color\n        light: '#4AACDE',  // border\n      },\n      error: {\n        main: '#fc4f52'\n      },\n      highlight: {\n        main: '#2f80ed'\n      },\n      disabled: {\n        main: '#b8c3d9'\n      },\n      text: {\n        secondary: '#6f8190'\n      },\n      bodyBackground: '#f4f7f9',\n      progressBar: {\n        main: '#2c41c2',\n        light: '#d4e1ee'\n      },\n    }\n  }),\n\n  prevTheme => ({\n    typography: {\n      fontFamily: [\n        \"Microsoft JhengHei\",\n        '\"Noto Sans TC\"',\n        \"Roboto\", \n        \"Helvetica\", \n        \"Arial\", \n        'sans-serif',\n      ].join(','),\n      useNextVariants: true,\n      h2: { fontWeight: 'medium' },\n      h3: { fontWeight: 'medium' },\n      h6: { fontSize: '24px', color: prevTheme.palette.primary.main, },\n      subtitle1: {\n        fontSize: '20px', color: prevTheme.palette.primary.main, fontWeight: prevTheme.typography.fontWeightMedium\n      },\n      subtitle2: {\n        fontSize: '16px',\n        color: prevTheme.palette.primary.main,\n        fontWeight: 500\n      },\n      body1: {  // typhgraphy default\n        fontSize: '16px',\n        color: prevTheme.palette.primary.main\n      },\n      body2: {  // html default\n        fontSize: '14px',\n        color: prevTheme.palette.text.secondary,\n      },\n      caption: {\n        fontSize: '12px',\n        color: prevTheme.palette.text.secondary,\n      },\n    }\n  }),\n\n  () => ({\n    props: {\n      MuiTypography: {\n        variantMapping: {\n          h1: 'h2',\n          h2: 'h2',\n          h3: 'h2',\n          h4: 'h2',\n          h5: 'h2',\n          h6: 'h2',\n          subtitle1: 'h2',\n          subtitle2: 'h2',\n          body1: 'span',\n          body2: 'span'\n        }\n      },\n    }\n  }),\n\n  () => ({\n    overrides: {\n      MuiButton: {\n        root: {\n          textTransform: 'inherit'\n        }\n      },\n      MuiTypography: {\n        root: {\n          verticalAlign: 'middle'\n        }\n      },\n      MuiTabs: {\n        root: {\n          height: 32,\n          minHeight: 32\n        }\n      },\n      MuiTab: {\n        root: {\n          height: 32,\n          minHeight: 32\n        }\n      }\n      // MuiOutlinedInput: {\n      //   root: {\n      //     color: 'red'\n      //   }\n      // }\n    }\n  }),\n)\nconsole.log(\"THEME\", theme)\n\nexport default theme\n","import React, { useState, Fragment } from 'react';\nimport AppRoutes from './wrappers/AppRoutes';\nimport theme from './wrappers/Theme';\nimport { MuiThemeProvider, CssBaseline } from '@material-ui/core';\n\nfunction App() {\n  console.log(\"App\")\n  return (\n    <Fragment>\n      <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppRoutes />\n      </MuiThemeProvider>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './wrappers/init'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}